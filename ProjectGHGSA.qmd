---
2---
title: "Cluster Analysis of GHG Emissions in 10 LATAM Countries (1990–2021)"
format: html
editor: visual
---

## Data

### Greenhouse Gases LATAM

```{r}
#link web -> https://www.climatewatchdata.org/ghg-emissions?chartType=line&end_year=2021&gases=all-ghg&regions=LAC&start_year=1990
#link data -> https://docs.google.com/spreadsheets/d/1fxaaoIBVEquq7Dm9ng42ai9_VjwVoWQV8JdT2eS4ehg/edit?usp=sharing

library(googlesheets4)
data_GEI <- read_sheet("https://docs.google.com/spreadsheets/d/1fxaaoIBVEquq7Dm9ng42ai9_VjwVoWQV8JdT2eS4ehg/edit?usp=sharing")
data_GEI
```

### Population growth in LATAM

```{r}
#Link web -> https://datos.bancomundial.org/indicador/SP.POP.TOTL?locations=ZJ
#Link data -> https://docs.google.com/spreadsheets/d/1Fb1_tsfISqIK1iC1LBcsjT00WVaE5sxpA5ifF-EgMvo/edit?usp=sharing

data_POB <- read_sheet("https://docs.google.com/spreadsheets/d/1Fb1_tsfISqIK1iC1LBcsjT00WVaE5sxpA5ifF-EgMvo/edit?usp=sharing")
data_POB
```

**Relative Number**

This process aims to calculate per capita greenhouse gas (GHG) emissions for different countries and years. The population of each country is used to divide the total emissions, obtaining an average value per person. This allows for comparing each individual's contribution to emissions, regardless of the total population size of each country.

The procedure consists of:

1.  **Merging databases**: Combine total GHG emissions with population data by matching country names.

2.  **Calculating per capita emissions**:

    Convert emissions from million tons (MtCO₂eq) to tons (tCO₂eq) by multiplying by 10\^6 and divide by the total population to get the per capita value.

    $\text{Per capita emissions} = \frac{\text{Total emissions [MtCO2eq]} \times 10^6}{\text{Total population [people]}}$.

3.  **Filtering columns**: Keep only the relevant data for analysis (country name and per capita values).

```{r}
library(dplyr)

# Check the column names
colnames(data_GEI)
colnames(data_POB)

# Adjust the code according to the actual column names
data_combined <- data_GEI %>%
  mutate(across(
    .cols = matches("^19[9][0-9]$|^20[0-2][0-9]$"),  # Select year columns between 1990 and 2021
    .fns = ~ .x / data_POB[[cur_column()]] * 10^6,  # Divide by population and multiply by 10^6
    .names = "{.col}_per_capita"  # Rename the columns
  )) %>%
  select(Country, ends_with("_per_capita"))  # Select relevant columns

# Preview the combined dataset
data_combined
```

```{r}
# Install necessary packages (if you haven't already)
if (!require("kableExtra")) install.packages("kableExtra")
if (!require("dplyr")) install.packages("dplyr")
if (!require("scales")) install.packages("scales")

# Load libraries
library(kableExtra)
library(dplyr)
library(scales)

# Calculate the average per capita emissions
data_combined$Avg_1990_2021 <- round(rowMeans(data_combined[, grep("_per_capita$", names(data_combined))]), 2)

# Create a table with the areas of the countries (in km²)
areas <- data.frame(
  Country = c("Argentina", "Bolivia", "Brazil", "Chile", "Colombia", "Ecuador", "Peru", "Paraguay", "Uruguay", "Venezuela"),
  Area_km2 = c(2780400, 1098581, 8515767, 756102, 1141748, 283561, 1285216, 406752, 176215, 916445)
)

# Merge the tables by the "Country" column
result <- data_combined %>%
  select(Country, Avg_1990_2021) %>%
  left_join(areas, by = "Country") %>%
  arrange(desc(Avg_1990_2021))  # Sort by average emissions

# Format with thousands and decimal separators
result <- result %>%
  mutate(
    Avg_1990_2021 = number(Avg_1990_2021, accuracy = 0.01, big.mark = ","),
    Area_km2 = number(Area_km2, big.mark = ",", decimal.mark = ".")
  )

# Create a styled table for a poster
result_table <- result %>%
  kbl(
    caption = "Average per capita GHG emissions and area (1990-2021)",
    col.names = c("Country", "Average Emissions (1990-2021) - [tCO2eq per capita]", "Area [km²]"),
    align = "c",
    format = "html"
  ) %>%
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed", "responsive"),
    full_width = F,
    font_size = 14
  ) %>%
  column_spec(1, bold = T, width = "10em") %>%
  column_spec(2, width = "10em") %>%
  column_spec(3, width = "12em") %>%
  row_spec(0, bold = T, background = "#D3D3D3")

# Save the table as an HTML file
save_kable(result_table, "emissions_and_area_poster.html")

# Display the table in the console
result_table
```

#### Graph of CO2 emissions progress in 10 South American countries.

```{r}
# Load necessary libraries
library(ggplot2)
library(tidyverse)

# Ensure that data_combined is correctly defined before this step.
# Pivot the data to long format for plotting
data_long <- data_combined %>%
  pivot_longer(
    cols = ends_with("per_capita"),  # Make sure to use the correct columns
    names_to = "Year", 
    values_to = "Emissions"
  ) %>%
  mutate(
    Year = as.numeric(str_extract(Year, "\\d{4}"))  # Extract the year from the columns
  )

# Plot the increase in GHG emissions for each country with thicker lines
ggplot(data_long, aes(x = Year, y = Emissions, color = Country, group = Country)) +
  geom_line(size = 0.8) +  # Adjust the line thickness
  geom_point() + 
  labs(
    title = "Per capita GHG emissions by country",
    x = "Year", 
    y = "Emissions (tCO2eq per capita)"
  ) +
  theme_minimal() +
  theme(
    legend.position = "right",
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold")
  )
```

```{r}
# Install necessary packages if they are not installed
if (!requireNamespace("sf", quietly = TRUE)) install.packages("sf")
if (!requireNamespace("rnaturalearth", quietly = TRUE)) install.packages("rnaturalearth")
if (!requireNamespace("rnaturalearthdata", quietly = TRUE)) install.packages("rnaturalearthdata")

# Load libraries
library(sf)
library(ggplot2)
library(dplyr)
library(rnaturalearth)
library(tidyr)

# Filter and rename emissions data by year
data_1990 <- data_combined %>%
  select(Country, `1990_per_capita`) %>%
  rename(Emissions = `1990_per_capita`) %>%
  mutate(Year = 1990)

data_2000 <- data_combined %>%
  select(Country, `2000_per_capita`) %>%
  rename(Emissions = `2000_per_capita`) %>%
  mutate(Year = 2000)

data_2010 <- data_combined %>%
  select(Country, `2010_per_capita`) %>%
  rename(Emissions = `2010_per_capita`) %>%
  mutate(Year = 2010)

data_2021 <- data_combined %>%
  select(Country, `2021_per_capita`) %>%
  rename(Emissions = `2021_per_capita`) %>%
  mutate(Year = 2021)

# Load South America shapefile
south_america <- ne_countries(scale = "medium", continent = "South America", returnclass = "sf")

# Merge emissions data with South America shapefile, ensuring NA values are replaced with 0
map_data_1990 <- south_america %>%
  left_join(data_1990, by = c("name_long" = "Country")) %>%
  mutate(Year = 1990) %>%
  replace_na(list(Emissions = 0))

map_data_2000 <- south_america %>%
  left_join(data_2000, by = c("name_long" = "Country")) %>%
  mutate(Year = 2000) %>%
  replace_na(list(Emissions = 0))

map_data_2010 <- south_america %>%
  left_join(data_2010, by = c("name_long" = "Country")) %>%
  mutate(Year = 2010) %>%
  replace_na(list(Emissions = 0))

map_data_2021 <- south_america %>%
  left_join(data_2021, by = c("name_long" = "Country")) %>%
  mutate(Year = 2021) %>%
  replace_na(list(Emissions = 0))

# Combine all maps into a single object
map_data_combined <- bind_rows(map_data_1990, map_data_2000, map_data_2010, map_data_2021)

# Remove any rows with NA in `Year`
map_data_combined <- map_data_combined %>% drop_na(Year)

# Create the map visualization with four panels
ggplot(data = map_data_combined) +
  geom_sf(aes(fill = Emissions, geometry = geometry), color = "black") +
  scale_fill_gradient(
    low = "#FEE0D2",   # Lighter color
    high = "#A50F15",   # Dark red for higher values
    na.value = "gray90", # Gray for countries with no data
    limits = c(0, 25),   # Emission value range
    breaks = seq(0, 25, by = 5), # Scale in intervals of 5
    name = "GHG per capita\n(t CO2eq/person)"
  ) +
  labs(
    title = "Greenhouse Gas Emissions per Capita in South America",
    subtitle = "Years: 1990, 2000, 2010, 2021",
    caption = "Source: GHG and population database\nCountries in gray are not included in the study."
  ) +
  facet_wrap(~Year, ncol = 4) +  # Arrange panels in a single row
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
    plot.subtitle = element_text(hjust = 0.5, size = 12),
    axis.text = element_text(size = 8),
    strip.text = element_text(face = "bold", size = 10), # Facet titles
    legend.position = "right",
    panel.grid = element_blank() # Remove grid lines
  )
```

### **Cluster Analysis 1990 - 2000**

**Step 1: Data Preparation**

In this step, we remove non-numeric columns (such as *Country* or identifiers) and missing values (*NA*). This ensures that the cluster analysis is performed only with numeric and complete data.

```{r}
# Filter relevant columns (1990 to 2000) and remove missing values, excluding 'Country'
data_combined_cleaned <- data_combined %>%
  select(matches("^199[0-9]_per_capita$|^2000_per_capita$")) %>%  # Select columns from 1990 to 2000
  na.omit()  # Remove rows with missing values (NA)

# Check the processed data
head(data_combined_cleaned)
```

#### **Step 2: Data Standardization**

Cluster analysis (such as K-means) is sensitive to the scale of variables. Therefore, we standardize the data so that all variables have a mean of 0 and a standard deviation of 1.

```{r}
# Standardize the data to remove the effect of different scales
data_scaled <- scale(data_combined_cleaned)
```

#### **Step 3: Optimal Cluster Determination with K-means**

We use the **elbow method** to determine the optimal number of clusters. The plot shows how the within-cluster sum of squares (WSS) decreases as the number of clusters increases. The point where the decrease starts to level off indicates the optimal number of clusters.

```{r}
library(factoextra)
# Determine the maximum number of clusters
n_obs <- nrow(data_scaled)  # Number of rows in the scaled data

# Plot the elbow method with a limit on the number of clusters
fviz_nbclust(data_scaled, kmeans, method = "wss", k.max = min(10, n_obs - 1)) +
  labs(title = "Elbow Method to Determine the Number of Clusters (1990 - 2000)")
```

#### Step 4: Optimal Cluster Determination with Hierarchical Clustering

```{r}
# Load necessary libraries
if (!requireNamespace("factoextra", quietly = TRUE)) install.packages("factoextra")
if (!requireNamespace("dendextend", quietly = TRUE)) install.packages("dendextend")

library(factoextra)
library(dendextend)

# Calculate the distance matrix (using Euclidean distance)
distance_matrix <- dist(data_scaled, method = "euclidean")

# Perform hierarchical clustering (using complete linkage method)
hclust_result <- hclust(distance_matrix, method = "complete")

# Plot the dendrogram
fviz_dend(hclust_result, k = 3,  # Number of desired clusters
          cex = 0.5,             # Text size
          k_colors = c("red", "blue", "green"),  # Cluster colors
          rect = TRUE,           # Draw rectangles around clusters
          rect_border = "gray",
          rect_fill = TRUE,
          main = "Dendrogram of Hierarchical Clustering (1990 - 2000)")
```

#### **Step 5: Visualizing Clusters using PCA**

Now, we use **Principal Component Analysis (PCA)** to project high-dimensional data onto two dimensions. This helps us visually explore how the clusters are formed and how countries are distributed within those clusters. Let’s plot the clusters using the first two principal components!

```{r}
# Assign observations to clusters (k = desired number of clusters)
cluster_assignments <- cutree(hclust_result, k = 3)  # Adjust "k" for the desired number of clusters

# Visualize clusters in PCA space
fviz_cluster(
  list(data = data_scaled, cluster = cluster_assignments),
  geom = "point",
  ellipse.type = "convex",  # Draw convex hulls around clusters
  ggtheme = theme_minimal(),
  main = "Hierarchical Clustering Visualization with PCA"
)
```

#### Step 6: Inclusion of Cluster Assignment for Countries

The clusters are saved as a new column (Cluster) in the original dataset to facilitate further analysis.

```{r}
# Cut the dendrogram into 3 clusters
clusters_hierarchical <- cutree(hclust_result, k = 3)

data_combined_1990_2000 <- data_combined %>%
  select(Country, matches("^199[0-9]_per_capita$|^2000_per_capita$"))

# Add clusters to the original dataset
data_combined_1990_2000$Cluster <- as.factor(clusters_hierarchical)

library(dplyr)

# Swap cluster labels
data_combined_1990_2000 <- data_combined_1990_2000 %>%
  mutate(
    Cluster = case_when(
      Cluster == "1" ~ "2",  # If cluster is 1, change to 2
      Cluster == "2" ~ "1",  # If cluster is 2, change to 1
      TRUE ~ as.character(Cluster)  # Keep other clusters unchanged
    ),
    Cluster = as.factor(Cluster)  # Convert back to factor
  )

# Check the first few records after the change
data_combined_1990_2000
```

```{r}
# Load necessary libraries
if (!requireNamespace("ggplot2", quietly = TRUE)) install.packages("ggplot2")
library(ggplot2)
library(dplyr)
library(tidyr)

# Convert data to long format for correct plotting
data_long <- data_combined_1990_2000 %>%
  pivot_longer(
    cols = starts_with("19") | starts_with("20"),  # Select columns with yearly data
    names_to = "Year",         # Create a column called "Year"
    values_to = "Emissions"    # Values of per capita emissions
  ) %>%
  mutate(Year = as.numeric(gsub("_per_capita", "", Year)))  # Clean year names

# Create a plot with facets arranged in a single horizontal row
ggplot(data_long, aes(x = Year, y = Emissions, color = Country, group = Country)) +
  geom_line(size = 0.8) +  # Lines for each country
  geom_point(size = 2) +  # Points for each year
  facet_wrap(~Cluster, nrow = 1) +  # All facets in one row
  scale_x_continuous(
      breaks = 1990:2000  # Show all years between 1990 and 2000
    ) +
  theme_minimal() +
  labs(
    title = "Per Capita GHG Emissions by Cluster (1990 - 2000)",
    subtitle = "Data grouped by country clusters",
    x = "Year",
    y = "Emissions (tCO2eq per capita)",
    color = "Country"
  ) +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, size = 12),
    legend.position = "right"  # Legend to the right of the plot
  )
```

### Cluster Analysis 2001 - 2010

```{r}
# Filtrar las columnas relevantes (2001 a 2010) y eliminar valores faltantes, excluyendo `Country`
data_combined_cleaned <- data_combined %>%
  select(matches("^200[1-9]_per_capita$|^2010_per_capita$")) %>%  # Seleccionar columnas entre 2001 y 2010
  na.omit()  # Eliminar filas con valores faltantes (NA)

# Verificar los datos procesados
head(data_combined_cleaned)
```

```{r}
# Estandarizar los datos (2001 a 2010) para eliminar el efecto de las diferentes escalas
data_scaled <- scale(data_combined_cleaned)
```

```{r}
library(factoextra)
# Determine the maximum number of clusters
n_obs <- nrow(data_scaled)  # Number of rows in the scaled data

# Plot the Elbow method with a limit on the number of clusters
fviz_nbclust(data_scaled, kmeans, method = "wss", k.max = min(10, n_obs - 1)) +
  labs(title = "Elbow Method to Determine the Number of Clusters (2001 - 2010)")
```

```{r}
# Load necessary libraries
if (!requireNamespace("factoextra", quietly = TRUE)) install.packages("factoextra")
if (!requireNamespace("dendextend", quietly = TRUE)) install.packages("dendextend")

library(factoextra)
library(dendextend)

# Calculate the distance matrix (using Euclidean distance)
distance_matrix <- dist(data_scaled, method = "euclidean")

# Perform hierarchical clustering (using complete linkage method)
hclust_result <- hclust(distance_matrix, method = "complete")

# Plot the dendrogram
fviz_dend(hclust_result, k = 3,  # Number of desired clusters
          cex = 0.5,             # Text size
          k_colors = c("red", "blue", "green"),  # Cluster colors
          rect = TRUE,           # Draw rectangles around clusters
          rect_border = "gray",
          rect_fill = TRUE,
          main = "Dendrogram of Hierarchical Clustering (2001 - 2010)")
```

```{r}
# Assign observations to clusters (k = desired number of clusters)
cluster_assignments <- cutree(hclust_result, k = 3)  # Change "k" according to the desired number of clusters

# Visualization of clusters in PCA space
fviz_cluster(
  list(data = data_scaled, cluster = cluster_assignments),
  geom = "point",
  ellipse.type = "convex",  # Draw ellipses around clusters
  ggtheme = theme_minimal(),
  main = "Visualization of Hierarchical Clusters with PCA"
)
```

```{r}
# Cut the dendrogram into 3 clusters
clusters_hierarchical <- cutree(hclust_result, k = 3)

data_combined_2001_2010 <- data_combined %>%
  select(Country, matches("^200[1-9]_per_capita$|^2010_per_capita$"))

# Add clusters to the original dataset
data_combined_2001_2010$Cluster <- as.factor(clusters_hierarchical)

library(dplyr)

# Swap cluster labels
data_combined_2001_2010 <- data_combined_2001_2010 %>%
  mutate(
    Cluster = case_when(
      Country == "Brazil" ~ "2",  # Always assign cluster 2 to Brazil
      Cluster == "1" ~ "2",  # If the cluster is 1, change to 2
      Cluster == "2" ~ "1",  # If the cluster is 2, change to 1
      TRUE ~ as.character(Cluster)  # Keep other clusters unchanged
    ),
    Cluster = as.factor(Cluster)  # Convert back to factor
  )

# Check the first records after the change
data_combined_2001_2010
```

```{r}
# Load necessary libraries
if (!requireNamespace("ggplot2", quietly = TRUE)) install.packages("ggplot2")
library(ggplot2)
library(dplyr)
library(tidyr)

# Convert data to long format for proper plotting
data_long <- data_combined_2001_2010 %>%
  pivot_longer(
    cols = starts_with("20"),  # Select columns with yearly data
    names_to = "Year",          # Create a column called "Year"
    values_to = "Emissions"     # Values for per capita emissions
  ) %>%
  mutate(Year = as.numeric(gsub("_per_capita", "", Year)))  # Clean year names

# Create a plot with facets arranged in a single horizontal row
ggplot(data_long, aes(x = Year, y = Emissions, color = Country, group = Country)) +
  geom_line(size = 0.8) +  # Lines for each country
  geom_point(size = 2) +   # Points for each year
  facet_wrap(~Cluster, nrow = 1) +  # All facets in a single row
  scale_x_continuous(
      breaks = 2001:2010  # Show all years from 2001 to 2010
    ) +
  theme_minimal() +
  labs(
    title = "Per Capita GHG Emissions by Cluster (2001 - 2010)",
    subtitle = "Data grouped by country clusters",
    x = "Year",
    y = "Emissions (tCO2eq per capita)",
    color = "Country"
  ) +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, size = 12),
    legend.position = "right"  # Legend on the right side of the plot
  )
```

### Cluster Analysis 2011 - 2021

```{r}
# Filter relevant columns (2011 to 2021) and remove missing values, excluding `Country`
data_combined_cleaned <- data_combined %>%
  select(matches("^201[1-9]_per_capita$|^202[0-1]_per_capita$")) %>%  # Select columns between 2011-2021
  na.omit()  # Remove rows with missing values (NA)

# Check processed data
head(data_combined_cleaned)
```

```{r}
# Standardize the data to eliminate the effect of different scales
data_scaled <- scale(data_combined_cleaned)
```

```{r}
library(factoextra)
# Determine the maximum number of clusters
n_obs <- nrow(data_scaled)  # Number of rows in the scaled data

# Plot the elbow method with a limit on the number of clusters
fviz_nbclust(data_scaled, kmeans, method = "wss", k.max = min(10, n_obs - 1)) +
  labs(title = "Elbow Method to Determine the Optimal Number of Clusters (2011 - 2021)")
```

```{r}
# Load necessary libraries
if (!requireNamespace("factoextra", quietly = TRUE)) install.packages("factoextra")
if (!requireNamespace("dendextend", quietly = TRUE)) install.packages("dendextend")

library(factoextra)
library(dendextend)

# Calculate the distance matrix (using Euclidean distance)
distance_matrix <- dist(data_scaled, method = "euclidean")

# Perform hierarchical clustering (using complete linkage method)
hclust_result <- hclust(distance_matrix, method = "complete")

# Plot the dendrogram
fviz_dend(hclust_result, k = 3,  # Number of desired clusters
          cex = 0.5,             # Text size
          k_colors = c("red", "blue", "green"),  # Cluster colors
          rect = TRUE,           # Draw rectangles around clusters
          rect_border = "gray",
          rect_fill = TRUE,
          main = "Dendrogram of Hierarchical Clustering (2011 - 2021)")
```

```{r}
# Assign observations to clusters (k = desired number of clusters)
cluster_assignments <- cutree(hclust_result, k = 3)  # Change "k" according to the desired number of clusters

# Visualization of clusters in PCA space
fviz_cluster(
  list(data = data_scaled, cluster = cluster_assignments),
  geom = "point",
  ellipse.type = "convex",  # Draw ellipses around clusters
  ggtheme = theme_minimal(),
  main = "Visualization of Hierarchical Clusters with PCA"
)
```

```{r}
# Cut the dendrogram into 3 clusters
clusters_hierarchical <- cutree(hclust_result, k = 3)

data_combined_2011_2021 <- data_combined %>%
  select(Country, matches("^201[1-9]_per_capita$|^202[0-1]_per_capita$"))

# Add the clusters to the original dataset
data_combined_2011_2021$Cluster <- as.factor(clusters_hierarchical)

library(dplyr)

# Swap cluster labels
data_combined_2011_2021 <- data_combined_2011_2021 %>%
  mutate(
    Cluster = case_when(
      Cluster == "1" ~ "2",  # If the cluster is 1, change to 2
      Cluster == "2" ~ "1",  # If the cluster is 2, change to 1
      TRUE ~ as.character(Cluster)  # Keep other clusters unchanged
    ),
    Cluster = as.factor(Cluster)  # Convert back to factor
  )

# Check the first few records after the change
data_combined_2011_2021
```

```{r}
# Load necessary libraries
if (!requireNamespace("ggplot2", quietly = TRUE)) install.packages("ggplot2")
library(ggplot2)
library(dplyr)
library(tidyr)

# Convert data to long format for proper plotting
data_long <- data_combined_2011_2021 %>%
  pivot_longer(
    cols = starts_with("20"),  # Select columns with yearly data
    names_to = "Year",          # Create a column named "Year"
    values_to = "Emissions"     # Values for per capita emissions
  ) %>%
  mutate(Year = as.numeric(gsub("_per_capita", "", Year)))  # Clean year names

# Create a plot with facets organized in a single horizontal row
ggplot(data_long, aes(x = Year, y = Emissions, color = Country, group = Country)) +
  geom_line(size = 0.8) +  # Lines for each country
  geom_point(size = 2) +   # Points for each year
  facet_wrap(~Cluster, nrow = 1) +  # All facets in a single row
  scale_x_continuous(
      breaks = 2011:2021  # Show all years from 2011 to 2021
    ) +
  theme_minimal() +
  labs(
    title = "Per Capita GHG Emissions by Cluster (2011 - 2021)",
    subtitle = "Data grouped by country clusters",
    x = "Year",
    y = "Emissions (tCO2eq per capita)",
    color = "Country"
  ) +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, size = 12),
    legend.position = "right"  # Legend on the right side of the plot
  )
```
